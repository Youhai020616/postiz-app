version: '3.8'

services:
  postiz:
    image: ghcr.io/gitroomhq/postiz-app:latest
    container_name: postiz-app
    restart: always
    environment:
      # 本地测试配置
      MAIN_URL: "http://localhost:5000"
      FRONTEND_URL: "http://localhost:5000"
      NEXT_PUBLIC_BACKEND_URL: "http://localhost:5000/api"
      
      # 安全配置
      JWT_SECRET: "local-test-jwt-secret-for-development-only"
      
      # 数据库配置
      DATABASE_URL: "postgresql://postiz-user:postiz-password@postiz-postgres:5432/postiz-local"
      REDIS_URL: "redis://postiz-redis:6379"
      BACKEND_INTERNAL_URL: "http://localhost:3000"
      
      # 本地测试配置
      IS_GENERAL: "true"
      DISABLE_REGISTRATION: "false"  # 本地测试允许注册
      NOT_SECURED: "true"  # 本地测试不需要HTTPS
      
      # 文件存储配置
      STORAGE_PROVIDER: "local"
      UPLOAD_DIRECTORY: "/uploads"
      NEXT_PUBLIC_UPLOAD_DIRECTORY: "/uploads"
      
      # API限制
      API_LIMIT: "30"
      
    volumes:
      - postiz-config:/config/
      - postiz-uploads:/uploads/
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "5000:5000"  # 直接暴露端口，无需反向代理
    networks:
      - postiz-network
    depends_on:
      postiz-postgres:
        condition: service_healthy
      postiz-redis:
        condition: service_healthy

  postiz-postgres:
    image: postgres:17-alpine
    container_name: postiz-postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postiz-password
      POSTGRES_USER: postiz-user
      POSTGRES_DB: postiz-local
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # 暴露端口便于管理
    networks:
      - postiz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postiz-user -d postiz-local"]
      interval: 10s
      timeout: 5s
      retries: 5

  postiz-redis:
    image: redis:7.2-alpine
    container_name: postiz-redis
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"  # 暴露端口便于管理
    networks:
      - postiz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Redis 管理界面（可选）
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: postiz-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:postiz-redis:6379"
    ports:
      - "8081:8081"
    networks:
      - postiz-network
    depends_on:
      - postiz-redis

volumes:
  postgres-data:
  redis-data:
  postiz-config:
  postiz-uploads:

networks:
  postiz-network:
    driver: bridge
