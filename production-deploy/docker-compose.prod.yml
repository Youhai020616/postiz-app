version: '3.8'

services:
  postiz:
    image: ghcr.io/gitroomhq/postiz-app:latest
    container_name: postiz-app
    restart: always
    environment:
      # 核心配置 - 请根据您的域名修改
      MAIN_URL: "https://postiz.yourcompany.com"
      FRONTEND_URL: "https://postiz.yourcompany.com"
      NEXT_PUBLIC_BACKEND_URL: "https://postiz.yourcompany.com/api"
      
      # 安全配置
      JWT_SECRET: "your-super-long-random-jwt-secret-change-this-to-something-very-secure"
      
      # 数据库配置
      DATABASE_URL: "postgresql://postiz-user:postiz-secure-password@postiz-postgres:5432/postiz-production"
      REDIS_URL: "redis://postiz-redis:6379"
      BACKEND_INTERNAL_URL: "http://localhost:3000"
      
      # 企业配置
      IS_GENERAL: "true"
      DISABLE_REGISTRATION: "true"  # 企业环境建议禁用公开注册
      
      # 文件存储配置
      STORAGE_PROVIDER: "local"
      UPLOAD_DIRECTORY: "/uploads"
      NEXT_PUBLIC_UPLOAD_DIRECTORY: "/uploads"
      
      # 安全设置
      NOT_SECURED: "false"  # 生产环境必须使用HTTPS
      
      # API限制
      API_LIMIT: "30"
      
      # 邮件配置（可选，用于用户激活和通知）
      # EMAIL_PROVIDER: "nodemailer"
      # EMAIL_HOST: "smtp.yourcompany.com"
      # EMAIL_PORT: "587"
      # EMAIL_SECURE: "true"
      # EMAIL_USER: "postiz@yourcompany.com"
      # EMAIL_PASS: "your-email-password"
      # EMAIL_FROM_ADDRESS: "postiz@yourcompany.com"
      # EMAIL_FROM_NAME: "Postiz - Your Company"
      
      # 社交媒体API配置（根据需要配置）
      # X_API_KEY: ""
      # X_API_SECRET: ""
      # LINKEDIN_CLIENT_ID: ""
      # LINKEDIN_CLIENT_SECRET: ""
      # REDDIT_CLIENT_ID: ""
      # REDDIT_CLIENT_SECRET: ""
      # FACEBOOK_APP_ID: ""
      # FACEBOOK_APP_SECRET: ""
      # YOUTUBE_CLIENT_ID: ""
      # YOUTUBE_CLIENT_SECRET: ""
      # INSTAGRAM_CLIENT_ID: ""
      # INSTAGRAM_CLIENT_SECRET: ""
      
      # AI功能配置（可选）
      # OPENAI_API_KEY: ""
      
    volumes:
      - postiz-config:/config/
      - postiz-uploads:/uploads/
      - /etc/localtime:/etc/localtime:ro  # 同步服务器时区
    ports:
      - "127.0.0.1:5000:5000"  # 只绑定到本地，通过反向代理访问
    networks:
      - postiz-network
    depends_on:
      postiz-postgres:
        condition: service_healthy
      postiz-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postiz-postgres:
    image: postgres:17-alpine
    container_name: postiz-postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postiz-secure-password
      POSTGRES_USER: postiz-user
      POSTGRES_DB: postiz-production
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d  # 初始化脚本目录
    networks:
      - postiz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postiz-user -d postiz-production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  postiz-redis:
    image: redis:7.2-alpine
    container_name: postiz-redis
    restart: always
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - postiz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # 可选：Redis管理界面（仅开发/调试时使用）
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: postiz-redis-commander
  #   restart: unless-stopped
  #   environment:
  #     REDIS_HOSTS: "local:postiz-redis:6379"
  #   ports:
  #     - "127.0.0.1:8081:8081"
  #   networks:
  #     - postiz-network
  #   depends_on:
  #     - postiz-redis

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  postiz-config:
    driver: local
  postiz-uploads:
    driver: local

networks:
  postiz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
